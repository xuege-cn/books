{"./":{"url":"./","title":"Introduction","keywords":"","body":"Introduction Copyright © qiangxu@clubfactory.com 2020 all right reserved，powered by Gitbook该文章修订时间： 2020-07-03 16:08:07 "},"knowledge/":{"url":"knowledge/","title":"知识星球","keywords":"","body":"知识星球 🌍 这里记录了各种知识分类 Copyright © qiangxu@clubfactory.com 2020 all right reserved，powered by Gitbook该文章修订时间： 2020-09-27 10:37:32 "},"interview/utils/":{"url":"interview/utils/","title":"工具库","keywords":"","body":"工具库 Copyright © qiangxu@clubfactory.com 2020 all right reserved，powered by Gitbook该文章修订时间： 2020-12-30 16:32:04 "},"interview/utils/1/1.html":{"url":"interview/utils/1/1.html","title":"chalk的使用","keywords":"","body":"chalk的使用 chalk 修饰符 bold italic reset dim underline inverse chalk Colors red black green yellow blue white redBright chalk Background Colors bgBlack bgRed bgRedBright chalk 使用 chalk.red.bold('Hello Chalk') chalk` There are {bold 5280} in a mile. there are {green.bold 3000} feet ` Copyright © qiangxu@clubfactory.com 2020 all right reserved，powered by Gitbook该文章修订时间： 2020-12-30 17:00:20 "},"interview/utils/2/1.html":{"url":"interview/utils/2/1.html","title":"监测 node 版本","keywords":"","body":"检测 node 版本 const semver = require('semver') const isNodeVersionLegal = semver.satisfies(process.version, '>=8') if (!isNodeVersionLegal) { console.log( chalk` Node version is{red.bold ${process.version}}, but application require >=8 ` ) } Copyright © qiangxu@clubfactory.com 2020 all right reserved，powered by Gitbook该文章修订时间： 2020-12-31 14:10:55 "},"interview/utils/3/1.html":{"url":"interview/utils/3/1.html","title":"在命令行显示进度","keywords":"","body":"命令行显示进度 const ora = require('ora'); const spinner = ora({ text: 'start to compile modules...', prefixText: '🍎' }).start(); setTimeout(() => { spinner.color = 'red'; spinner.succeed('compile module succeed!') }, 2000) Copyright © qiangxu@clubfactory.com 2020 all right reserved，powered by Gitbook该文章修订时间： 2020-12-31 14:29:28 "},"interview/utils/4/1.html":{"url":"interview/utils/4/1.html","title":"交互式命令行","keywords":"","body":"交互式命令行 const inquirer = require('inquirer') const templateNameList = ['react', 'vue', 'angular'] inquirer .prompt([ { type: 'input', name: 'name', message: '请输入项目名:', default: function () { return 'emp-project' }, }, { type: 'list', name: 'template', message: '请选择模板:', choices: templateNameList, }, { type: 'confirm', name: 'isAuto', message: '是否开启自动更新:', default: function () { return true }, }, ]) .then(answers => { console.log('结果：', answers) }) Copyright © qiangxu@clubfactory.com 2020 all right reserved，powered by Gitbook该文章修订时间： 2020-12-31 14:37:35 "},"interview/utils/5/1.html":{"url":"interview/utils/5/1.html","title":"命令行表格展示","keywords":"","body":"命令行表格展示 const Table = require('cli-table3') const table = new Table({ head: ['Emp & Deps', 'Version'], style: {head: ['cyan']}, chars: { top: '═', 'top-mid': '╤', 'top-left': '╔', 'top-right': '╗', bottom: '═', 'bottom-mid': '╧', 'bottom-left': '╚', 'bottom-right': '╝', left: '║', 'left-mid': '╟', mid: '─', 'mid-mid': '┼', right: '║', 'right-mid': '╢', middle: '│', }, }) table.push(['@efox/emp-cli', 'v1.0.0']) table.push(['webpack', 'v1.0.0']) table.push(['webpack-dev-server', 'v1.0.0']) table.push(['typescript', 'v1.0.0']) table.push(['postcss', 'v1.0.0']) console.log(table.toString() + '\\n') Copyright © qiangxu@clubfactory.com 2020 all right reserved，powered by Gitbook该文章修订时间： 2021-01-04 10:45:49 "},"interview/utils/6/1.html":{"url":"interview/utils/6/1.html","title":"命令行 git","keywords":"","body":"命令行 git const fs = require('fs') const git = require('git-promise') async function clone () { if (!fs.existsSync('./vue')) { await git('clone https://github.com/efoxTeam/emp-vue2-template.git ./vue') console.log('clone done') } else { console.log('project exist') } } clone(); Copyright © qiangxu@clubfactory.com 2020 all right reserved，powered by Gitbook该文章修订时间： 2021-01-04 11:09:45 "},"interview/algorithm/":{"url":"interview/algorithm/","title":"算法","keywords":"","body":"算法 Copyright © qiangxu@clubfactory.com 2020 all right reserved，powered by Gitbook该文章修订时间： 2021-01-11 17:21:30 "},"interview/algorithm/1/1.html":{"url":"interview/algorithm/1/1.html","title":"深度优先遍历和广度优先遍历的解法","keywords":"","body":" 从数据结构解 深度优先遍历：【栈】 后进先出 广度优先遍历：【队列】 先进先出 DFS：depth first search function dfs(node) { const stack = [node]; while (stack.length) { const node = stack.pop(); console.log(node.leaf); node.children.slice().reverse().forEach(child => { stack.push(child); }) } } BFS：breadth first search function bfs (node) { const queue = [node]; while (queue.length) { const node = queue.shift(); console.log(node.leaf); node.children.forEach(child => { queue.push(child); }) } } Copyright © qiangxu@clubfactory.com 2020 all right reserved，powered by Gitbook该文章修订时间： 2021-01-11 17:36:53 "}}